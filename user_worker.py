# ==========================================
#  user_worker.py
#  –§–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å (Background Worker) –¥–ª—è Render.com
#  –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–∞—Ä–∫–æ–≤.
# ==========================================

import asyncio
import asyncpg
import time
import os
from pyrogram import Client
from pyrogram.types import Gift
from typing import List, Dict

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
# –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Render

# –£—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç-–∞–∫–∫–∞—É–Ω—Ç–∞ (–≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞)
API_ID = int(os.getenv("API_ID", 0))
API_HASH = os.getenv("API_HASH")
SESSION_NAME = os.getenv("SESSION_NAME", "my_telegram_session")

# –£—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ (–Ω—É–∂–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
BOT_TOKEN = os.getenv("BOT_TOKEN")

# ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–¥—Ä–µ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv("DATABASE_URL")
NOTIFICATION_CHANNEL_ID = int(os.getenv("NOTIFICATION_CHANNEL_ID", 0))

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---

async def init_db(pool):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    async with pool.acquire() as conn:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS known_gifts (
                gift_id BIGINT PRIMARY KEY,
                star_count INTEGER NOT NULL
            )
        ''')
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS telegram_users (
                user_id BIGINT PRIMARY KEY,
                star_balance BIGINT NOT NULL DEFAULT 0
            )
        ''')
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

async def get_all_users(pool):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –±–∞–ª–∞–Ω—Å—ã –∏–∑ –ë–î."""
    async with pool.acquire() as conn:
        return await conn.fetch('SELECT user_id, star_balance FROM telegram_users')

async def get_known_gift_ids(pool) -> List[int]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ ID –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    async with pool.acquire() as conn:
        rows = await conn.fetch('SELECT gift_id FROM known_gifts')
        return [row['gift_id'] for row in rows]

async def add_new_gifts_to_db(pool, gifts: List[Gift]):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    if not gifts: return
    async with pool.acquire() as conn:
        await conn.executemany(
            'INSERT INTO known_gifts (gift_id, star_count) VALUES ($1, $2) ON CONFLICT DO NOTHING',
            [(g.id, g.star_count) for g in gifts]
        )
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(gifts)} –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

async def set_user_balance(pool, user_id, new_balance):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    async with pool.acquire() as conn:
        await conn.execute(
            "UPDATE telegram_users SET star_balance = $1 WHERE user_id = $2",
            new_balance, user_id
        )

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

async def notify_new_gifts_broadcast(bot_client: Client, new_gifts: List[Gift], db_pool):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –µ–≥–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –ë–î –∏ –≤ –∫–∞–Ω–∞–ª."""
    if not new_gifts: return
    
    text_parts = ["new gifts:"]
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–∞—Ä–∫–∏ –ø–æ —Ü–µ–Ω–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    for gift in sorted(new_gifts, key=lambda g: g.star_count, reverse=True):
        text_parts.append(f"  üéÅ - {gift.star_count} ‚òÖ")
    
    message_text = "\n".join(text_parts)
    
    all_users = await get_all_users(db_pool)
    recipient_ids = {user['user_id'] for user in all_users}
    recipient_ids.add(NOTIFICATION_CHANNEL_ID)
    
    print(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–∞—Ö –¥–ª—è {len(recipient_ids)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π...")
    for chat_id in recipient_ids:
        try:
            await bot_client.send_message(chat_id, message_text)
            await asyncio.sleep(0.1)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")
    print("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

async def create_and_execute_greedy_purchase_plan(user_client: Client, user_id: int, user_balance: int, new_gifts: List[Gift], db_pool):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ–∫—É–ø–æ–∫ –ø–æ "–∂–∞–¥–Ω–æ–º—É" –∞–ª–≥–æ—Ä–∏—Ç–º—É."""
    if not new_gifts or user_balance <= 0: return
    
    gifts_by_priority = sorted(new_gifts, key=lambda g: g.star_count, reverse=True)
    purchase_plan: Dict[int, int] = {g.id: 0 for g in gifts_by_priority}
    working_balance = user_balance
    total_cost = 0

    for gift in gifts_by_priority:
        if working_balance < gift.star_count:
            continue
        quantity_to_buy = working_balance // gift.star_count
        purchase_plan[gift.id] = quantity_to_buy
        cost_for_this_gift = quantity_to_buy * gift.star_count
        working_balance -= cost_for_this_gift
        total_cost += cost_for_this_gift

    if total_cost == 0:
        print(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ë–∞–ª–∞–Ω—Å: {user_balance}) –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤.")
        return

    print(f"\n--- –ü–ª–∞–Ω –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ë–∞–ª–∞–Ω—Å: {user_balance}) ---")
    for gift in gifts_by_priority:
        if purchase_plan.get(gift.id, 0) > 0:
            print(f"- –ü–æ–¥–∞—Ä–æ–∫ {gift.id} (—Å—Ç–æ–∏–º–æ—Å—Ç—å {gift.star_count}): –∫—É–ø–∏—Ç—å {purchase_plan[gift.id]} —à—Ç.")
    print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} –∑–≤—ë–∑–¥. –†–∞—Å—á—ë—Ç–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {user_balance - total_cost}")
    print("-------------------------------------------------")
    
    for gift in gifts_by_priority:
        quantity_to_execute = purchase_plan.get(gift.id, 0)
        if quantity_to_execute == 0: continue
            
        print(f"–ü–æ–∫—É–ø–∞—é {quantity_to_execute} —à—Ç. –ø–æ–¥–∞—Ä–∫–∞ {gift.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
        for i in range(quantity_to_execute):
            try:
                await user_client.send_gift(chat_id=user_id, gift_id=gift.id)
                print(f"  > –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫ {gift.id} ({i+1}/{quantity_to_execute})")
                await asyncio.sleep(0.4) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ñ–ª—É–¥–∞
            except Exception as e:
                print(f"  > –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞ {gift.id}: {e}")
                total_cost -= gift.star_count * (quantity_to_execute - i)
                break
    
    final_balance = user_balance - total_cost
    await set_user_balance(db_pool, user_id, final_balance)
    print(f"–í—Å–µ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤ –ë–î: {final_balance}")

async def main_worker():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    if not all([API_ID, API_HASH, SESSION_NAME, BOT_TOKEN, DATABASE_URL]):
        print("–û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –í–æ—Ä–∫–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")
        return

    print("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞...")
    db_pool = await asyncpg.create_pool(dsn=DATABASE_URL)
    await init_db(db_pool)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–∞ –∫–ª–∏–µ–Ω—Ç–∞
    user_client = Client(SESSION_NAME, api_id=API_ID, api_hash=API_HASH)
    bot_client = Client("bot_sender_instance", bot_token=BOT_TOKEN, api_id=API_ID, api_hash=API_HASH)

    await user_client.start()
    await bot_client.start()
    print("–ö–ª–∏–µ–Ω—Ç-–∞–∫–∫–∞—É–Ω—Ç –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã.")

    last_log_time = time.time()
    gift_found_this_hour = False

    while True:
        try:
            current_gifts = await user_client.get_available_gifts()
            known_ids = await get_known_gift_ids(db_pool)
            new_gifts = [g for g in current_gifts if g.id not in known_ids and g.star_count > 0]

            if new_gifts:
                gift_found_this_hour = True
                await add_new_gifts_to_db(db_pool, new_gifts)
                await notify_new_gifts_broadcast(bot_client, new_gifts, db_pool)
                users_to_gift = await get_all_users(db_pool)
                for user in users_to_gift:
                    await create_and_execute_greedy_purchase_plan(
                        user_client=user_client,
                        user_id=user['user_id'],
                        user_balance=user['star_balance'],
                        new_gifts=new_gifts,
                        db_pool=db_pool
                    )
            
            if time.time() - last_log_time > 3600:
                if not gift_found_this_hour:
                    print(f"[{time.ctime()}] –ù–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...")
                last_log_time = time.time()
                gift_found_this_hour = False

            await asyncio.sleep(2.0) # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

        except Exception as e:
            print(f"–í –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –≤–æ—Ä–∫–µ—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(15)

if __name__ == "__main__":
    asyncio.run(main_worker())
